{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\React-forms-userInput\\\\src\\\\components\\\\SimpleInput.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport useInput from \"../Hooks/use-input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleInput = props => {\n  _s();\n  const {\n    value: entredName,\n    isValide: entredNameIsValide,\n    hasError: nameInputHasError,\n    valueInputChangeHandler: nameChangeHandler,\n    valueInputBlurHandler: nameBlurHandler,\n    reset: resetNameInput\n  } = useInput(value => value.trim() !== \"\");\n  // const nameInputRef = useRef();\n  // const [entredName, setEntredName] = useState('');\n  // const [entredNameTouched, setEntredNameTouched] = useState(false);\n\n  const [entredEmail, setEntredEmail] = useState('');\n  const [entredEmailTouched, setEntredEmailTouched] = useState(false);\n\n  // const entredNameIsValide = entredName.trim() !== \"\";\n  // const nameInputIsInvalide = !entredNameIsValide && entredNameTouched\n\n  const entredEmailIsValide = entredEmail.trim() !== \"\" && /\\S+@\\S+\\.\\S+/.test(entredEmail);\n  const emailInputIsInvalide = !entredEmailIsValide && entredEmailTouched;\n  let formIsValide = false;\n  if (entredNameIsValide && entredEmailIsValide) {\n    formIsValide = true;\n  }\n\n  // const nameInputChangeHandler = (event) => {\n  //   setEntredName(event.target.value)\n  // };\n\n  const emailInputChangeHandler = event => {\n    setEntredEmail(event.target.value);\n  };\n\n  // const nameInputBlurHandler = () => {\n  //   setEntredNameTouched(true);\n  // };\n\n  const emailInputBlurHandler = () => {\n    setEntredEmailTouched(true);\n  };\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n\n    // setEntredNameTouched(true);\n\n    if (!entredNameIsValide && !entredEmailIsValide) {\n      return;\n    }\n    ;\n    console.log(entredName);\n    console.log(entredEmail);\n    // const entredValue = nameInputRef.current.value;\n    // console.log(entredValue);\n\n    // nameInputRef.current.value = \"\"; - NOT ideal, DO NOT manipulate the DOM \n    // setEntredName(\"\");\n    // setEntredNameTouched(false);\n\n    resetNameInput();\n    setEntredEmail('');\n    setEntredEmailTouched(false);\n  };\n  const nameInputClasses = nameInputHasError ? 'form-control invalid' : \"form-control\";\n  const emailInputClasses = emailInputIsInvalide ? 'form-control invalid' : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        // ref={nameInputRef}\n        type: \"text\",\n        id: \"name\",\n        onChange: nameChangeHandler,\n        onBlur: nameBlurHandler,\n        value: entredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), nameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty! \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your E-mail\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        onChange: emailInputChangeHandler,\n        onBlur: emailInputBlurHandler,\n        value: entredEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), emailInputIsInvalide && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Please enter a valide email!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValide,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleInput, \"Tt1mK3FiYfE16BbBl0Rfe8j09ww=\", false, function () {\n  return [useInput];\n});\n_c = SimpleInput;\nexport default SimpleInput;\nvar _c;\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useState","useInput","SimpleInput","props","value","entredName","isValide","entredNameIsValide","hasError","nameInputHasError","valueInputChangeHandler","nameChangeHandler","valueInputBlurHandler","nameBlurHandler","reset","resetNameInput","trim","entredEmail","setEntredEmail","entredEmailTouched","setEntredEmailTouched","entredEmailIsValide","test","emailInputIsInvalide","formIsValide","emailInputChangeHandler","event","target","emailInputBlurHandler","formSubmissionHandler","preventDefault","console","log","nameInputClasses","emailInputClasses"],"sources":["C:/React/React-forms-userInput/src/components/SimpleInput.js"],"sourcesContent":["import { useState } from \"react\";\nimport useInput from \"../Hooks/use-input\";\n\nconst SimpleInput = (props) => {\n  const {\n    value: entredName,\n    isValide: entredNameIsValide,\n    hasError: nameInputHasError,\n    valueInputChangeHandler: nameChangeHandler,\n    valueInputBlurHandler: nameBlurHandler,\n    reset: resetNameInput\n  } = useInput(value => value.trim() !== \"\");\n  // const nameInputRef = useRef();\n  // const [entredName, setEntredName] = useState('');\n  // const [entredNameTouched, setEntredNameTouched] = useState(false);\n\n  const [entredEmail, setEntredEmail] = useState('');\n  const [entredEmailTouched, setEntredEmailTouched] = useState(false);\n\n  // const entredNameIsValide = entredName.trim() !== \"\";\n  // const nameInputIsInvalide = !entredNameIsValide && entredNameTouched\n\n  const entredEmailIsValide = entredEmail.trim() !== \"\" && /\\S+@\\S+\\.\\S+/.test(entredEmail);\n  const emailInputIsInvalide = !entredEmailIsValide && entredEmailTouched;\n\n  let formIsValide = false;\n\n  if (entredNameIsValide && entredEmailIsValide) {\n    formIsValide = true;\n  }\n\n  // const nameInputChangeHandler = (event) => {\n  //   setEntredName(event.target.value)\n  // };\n\n  const emailInputChangeHandler = (event) => {\n    setEntredEmail(event.target.value)\n  };\n\n  // const nameInputBlurHandler = () => {\n  //   setEntredNameTouched(true);\n  // };\n\n  const emailInputBlurHandler = () => {\n    setEntredEmailTouched(true);\n  }\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n\n    // setEntredNameTouched(true);\n\n    if (!entredNameIsValide && !entredEmailIsValide) {\n      return;\n    };\n\n    console.log(entredName);\n    console.log(entredEmail);\n    // const entredValue = nameInputRef.current.value;\n    // console.log(entredValue);\n\n    // nameInputRef.current.value = \"\"; - NOT ideal, DO NOT manipulate the DOM \n    // setEntredName(\"\");\n    // setEntredNameTouched(false);\n\n    resetNameInput();\n\n    setEntredEmail('');\n    setEntredEmailTouched(false);\n  };\n\n  const nameInputClasses = nameInputHasError ? 'form-control invalid' : \"form-control\";\n  const emailInputClasses = emailInputIsInvalide ? 'form-control invalid' : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input\n          // ref={nameInputRef}\n          type='text'\n          id='name'\n          onChange={nameChangeHandler}\n          onBlur={nameBlurHandler}\n          value={entredName}\n        />\n        {nameInputHasError && <p className=\"error-text\">Name must not be empty! </p>}\n      </div>\n      <div className={emailInputClasses}>\n        <label htmlFor='email'>Your E-mail</label>\n        <input\n          type='email'\n          id='email'\n          onChange={emailInputChangeHandler}\n          onBlur={emailInputBlurHandler}\n          value={entredEmail}\n        />\n        {emailInputIsInvalide && <p className=\"error-text\">Please enter a valide email!</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValide}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}