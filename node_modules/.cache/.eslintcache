[{"C:\\React\\React-forms-userInput\\src\\index.js":"1","C:\\React\\React-forms-userInput\\src\\App.js":"2","C:\\React\\React-forms-userInput\\src\\components\\SimpleInput.js":"3","C:\\React\\React-forms-userInput\\src\\Hooks\\use-input.js":"4","C:\\React\\React-forms-userInput\\src\\components\\BasicForm.js":"5"},{"size":179,"mtime":1671700231581,"results":"6","hashOfConfig":"7"},{"size":217,"mtime":1671735264635,"results":"8","hashOfConfig":"7"},{"size":2957,"mtime":1671727937512,"results":"9","hashOfConfig":"7"},{"size":1524,"mtime":1672215655577,"results":"10","hashOfConfig":"7"},{"size":3140,"mtime":1672212704897,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"rodva8",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\React\\React-forms-userInput\\src\\index.js",[],[],"C:\\React\\React-forms-userInput\\src\\App.js",[],[],"C:\\React\\React-forms-userInput\\src\\components\\SimpleInput.js",[],[],"C:\\React\\React-forms-userInput\\src\\Hooks\\use-input.js",["28"],[],"import { useState, useReducer } from \"react\";\r\n\r\nconst initialInputState = {\r\n    value: '',\r\n    isTouched: false,\r\n};\r\n\r\nconst inputStateReducer = (state, action) => {\r\n    if (action.type === \"INPUT\") {\r\n        return { value: action.value, isTouched: state.isTouched }\r\n    }\r\n    if (action.type === 'BLUR') {\r\n        return { isTouched: true, value: state.value }\r\n    }\r\n    if (action.type === \"RESET\") {\r\n        return { isTouched: false, value: ''}\r\n    }\r\n    return inputStateReducer;\r\n};\r\n\r\nconst useInput = (valideValue) => {\r\n    const [inputState, dispatch] = useReducer(inputStateReducer, initialInputState)\r\n\r\n    // const [entredValue, setEntredValue] = useState('');\r\n    // const [isTouched, setIsTouched] = useState(false);\r\n\r\n    const valueIsValide = valideValue(inputState.value);\r\n    const hasError = !valueIsValide && inputState.isTouched;\r\n\r\n    const valueInputChangeHandler = (event) => {\r\n        dispatch({ type: 'INPUT', value: event.target.value })\r\n        // setEntredValue(event.target.value)\r\n    };\r\n\r\n    const valueInputBlurHandler = () => {\r\n        dispatch({ type: 'BLUR' })\r\n        // setIsTouched(true);\r\n    };\r\n\r\n    const reset = () => {\r\n        dispatch({ type: 'RESET' })\r\n        // setEntredValue('');\r\n        // setIsTouched(false);\r\n    };\r\n\r\n    return {\r\n        value: inputState.value,\r\n        isValide: valueIsValide,\r\n        hasError,\r\n        valueInputChangeHandler,\r\n        valueInputBlurHandler,\r\n        reset\r\n    }\r\n};\r\n\r\nexport default useInput;","C:\\React\\React-forms-userInput\\src\\components\\BasicForm.js",[],[],{"ruleId":"29","severity":1,"message":"30","line":1,"column":10,"nodeType":"31","messageId":"32","endLine":1,"endColumn":18},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar"]